Index: README
===================================================================
--- README	(revision 248)
+++ README	(working copy)
@@ -16,4 +16,19 @@
 New Changes:-
 	1: Change Dynamic IPs to Elastic IPs.
 
+SVN Version No - 249
+Build uploaded on 07/07/2017
+
+New Changes:-
+	1: Added 2 new Apis.
+		> To get reports log data.
+		> To get block statistics.
+		> Changes in code related to these Apis
+
+	2: Added logs for report logging.
+		> Changes in code related to this.
+
+	3: Fixed issue of resource blocking.(After sometimes NotificationReceiver stopped receiving the data from other nodes).
+		> Change in NotificationReceiver#listenNotification(...)(Added resource.close()).
+
 		
Index: src/main/java/com/pbc/blockchain/creation/SingleFileJsonPersistor.java
===================================================================
--- src/main/java/com/pbc/blockchain/creation/SingleFileJsonPersistor.java	(revision 248)
+++ src/main/java/com/pbc/blockchain/creation/SingleFileJsonPersistor.java	(working copy)
@@ -33,6 +33,7 @@
 public class SingleFileJsonPersistor<T> implements Persistor<T> {
 
 	private static final Logger logger = Logger.getLogger(SingleFileJsonPersistor.class);
+	private static final Logger reportLogger = Logger.getLogger("reportsLogger");
 
 	private long lastByteLocation = 0l;
 
@@ -55,6 +56,10 @@
 	private final String BLOCKCHAIN_CONTROLLER = ConfigConstants.BLOCKCHAIN_CONTROLLER;
 	private final ReadWriteLock globalLock = new ReentrantReadWriteLock();
 
+	public TreeSet<BlockContent> getOrderedSet() {
+		return orderedBlockSet;
+	}
+
 	@Override
 	public void addBlocks(final List<T> blocks) {
 		for (final T block : blocks) {
@@ -129,6 +134,7 @@
 			sizeMap.put(txnIdPlusTag, currentBlockLength);
 			hashList.add(insertHashAt, txnIdPlusTag);
 			logger.info("Added block for this combination key : " + txnIdPlusTag);
+			reportLogger.fatal("Current block chain size is :: " + orderedBlockSet.size());
 		} catch (final IOException ioe) {
 			orderedBlockSet.remove(blockContent);
 			logger.error("Problem into writing block data ", ioe);
Index: src/main/java/com/pbc/notification/NotificationReceiver.java
===================================================================
--- src/main/java/com/pbc/notification/NotificationReceiver.java	(revision 248)
+++ src/main/java/com/pbc/notification/NotificationReceiver.java	(working copy)
@@ -37,15 +37,6 @@
 @Service("getNotificationService")
 public class NotificationReceiver {
 
-	public TransactionMessageService getTransactionMessageService() {
-		return transactionMessageService;
-	}
-
-	@Autowired
-	public void setTransactionMessageService(final TransactionMessageService transactionMessageService) {
-		this.transactionMessageService = transactionMessageService;
-	}
-
 	private TransactionMessageService transactionMessageService;
 
 	@Autowired
@@ -61,6 +52,7 @@
 	private BlockService blockService;
 
 	private static final Logger logger = Logger.getLogger(NotificationReceiver.class);
+	private static final Logger reportLogger = Logger.getLogger("reportsLogger");
 
 	/**
 	 * This block DTO cache will hold DTO cache objects. Whenever the CRC
@@ -80,6 +72,15 @@
 	 */
 	public static volatile boolean keepRunning = true;
 
+	public TransactionMessageService getTransactionMessageService() {
+		return transactionMessageService;
+	}
+
+	@Autowired
+	public void setTransactionMessageService(final TransactionMessageService transactionMessageService) {
+		this.transactionMessageService = transactionMessageService;
+	}
+
 	/**
 	 * Start a thread to listen a socket continuously for a provided port
 	 * number.
@@ -105,6 +106,7 @@
 				final Socket receivedSocket = serverSocket.accept();
 				logger.info(
 						"Socket Received with IP::" + (currentHost = receivedSocket.getInetAddress().getHostAddress()));
+				reportLogger.fatal("CRC received from node :: " + receivedSocket.getInetAddress().getHostAddress());
 				inputStream = receivedSocket.getInputStream();
 				receivedBuffer = new BufferedReader(new InputStreamReader(inputStream));
 				String input = null;
@@ -120,7 +122,16 @@
 				// add host to the list of other hosts in node network if it
 				// does not exists already.
 				addHostInList(receivedSocket);
+				if (null != receivedSocket && !receivedSocket.isClosed()) {
+					receivedSocket.close();
+				}
 			}
+			if (null != inputStream) {
+				inputStream.close();
+			}
+			if (null != receivedBuffer) {
+				receivedBuffer.close();
+			}
 		} catch (final IOException ioe) {
 			logger.error("Server Socket encountered this exception : ", ioe);
 		}
@@ -193,6 +204,7 @@
 		final ExecutorService executorService = ThreadPoolUtility.getThreadPool();
 		executorService.submit(saveBlockRunnableTask.setParseableBlockDTO(blockDTO));
 		logger.info("Block created and saved with combined Key: " + combinedKey);
+
 	}
 
 	public boolean clearMaps(final String combinedKey, final List<String> crcList,
@@ -232,10 +244,7 @@
 				}
 				final boolean isToBeDeleted = helperListSize >= MIN_NODE_VALIDITY
 						&& isBlockProcessable(confirmationList);
-				// final boolean isUpdated =
-				// blockService.updateDeleteStatus(notificationObject.getTag(),
-				// notificationObject.getTransactionId(),
-				// BlockStatusEnum.BLOCK_TO_BE_DELETED.name());
+
 				logger.info("Value of isToBeDeleleted " + isToBeDeleted);
 				if (isToBeDeleted) {
 					// save the block as we have got confirmation from three
@@ -247,6 +256,8 @@
 					logger.info(
 							"Block removed from block chain. Now removing data from crc map and confirmation map for combined key: "
 									+ deleteComfirmationKey);
+					reportLogger.fatal("Block successfully removed from the Private BlockChain for transaction id : "
+							+ notificationObject.getTransactionId());
 				}
 				clearMaps(deleteComfirmationKey, crcList, confirmationList);
 
Index: src/main/java/com/pbc/notification/NotificationSender.java
===================================================================
--- src/main/java/com/pbc/notification/NotificationSender.java	(revision 248)
+++ src/main/java/com/pbc/notification/NotificationSender.java	(working copy)
@@ -27,6 +27,7 @@
 public class NotificationSender {
 
 	private static final Logger logger = Logger.getLogger(NotificationSender.class);
+	private static final Logger reportLogger = Logger.getLogger("reportsLogger");
 
 	// remember only getter is provided for this field.
 	// Although that also does not prevent this from being accidently changing.
@@ -76,7 +77,8 @@
 					bw.write("\n");
 					bw.flush();
 					socket.close();
-
+					reportLogger.fatal("Broadcasting " + notificationObject.getNotificationType() + " to host : " + host
+							+ " for transaction id : " + notificationObject.getTransactionId());
 					logger.info("Wrote this notification object to host:  " + host + " message sent: "
 							+ stringNotificationObject + " and combined key: " + notificationObject.getTag()
 							+ notificationObject.getTransactionId());
Index: src/main/java/com/pbc/repository/BlockStatusDao.java
===================================================================
--- src/main/java/com/pbc/repository/BlockStatusDao.java	(revision 248)
+++ src/main/java/com/pbc/repository/BlockStatusDao.java	(working copy)
@@ -15,4 +15,8 @@
 	List<BlockStatus> getStatus(final String[] tagList, final String[] trxnList);
 
 	List<BlockStatus> getBlockList(List<String> list);
+
+	int getTotalBlock();
+
+	int getAvailableBlock();
 }
\ No newline at end of file
Index: src/main/java/com/pbc/repository/impl/BlockStatusDaoImpl.java
===================================================================
--- src/main/java/com/pbc/repository/impl/BlockStatusDaoImpl.java	(revision 248)
+++ src/main/java/com/pbc/repository/impl/BlockStatusDaoImpl.java	(working copy)
@@ -135,4 +135,28 @@
 					e);
 		}
 	}
+
+	@Override
+	public int getTotalBlock() {
+		final MapSqlParameterSource source = new MapSqlParameterSource();
+		source.addValue("saved", BlockStatusEnum.SAVED.name());
+		source.addValue("deleted", BlockStatusEnum.DELETED.name());
+		source.addValue("block_detele_in_process", BlockStatusEnum.BLOCK_DELETE_IN_PROCESS.name());
+
+		final String query = "select count(*) from block_status where status IN(:saved, :deleted, :block_detele_in_process)";
+		final Integer execute = namedParameterJdbcTemplate.queryForObject(query, source, Integer.class);
+
+		return execute.intValue();
+	}
+
+	@Override
+	public int getAvailableBlock() {
+		final MapSqlParameterSource source = new MapSqlParameterSource();
+		source.addValue("SAVED", BlockStatusEnum.SAVED.name());
+		source.addValue("BLOCK_DELETE_IN_PROCESS", BlockStatusEnum.BLOCK_DELETE_IN_PROCESS.name());
+		final String query = "select count(*) from block_status where (status= :SAVED  OR status= :BLOCK_DELETE_IN_PROCESS)";
+
+		final Integer execute = namedParameterJdbcTemplate.queryForObject(query, source, Integer.class);
+		return execute.intValue();
+	}
 }
\ No newline at end of file
Index: src/main/java/com/pbc/restcontroller/BlockController.java
===================================================================
--- src/main/java/com/pbc/restcontroller/BlockController.java	(revision 248)
+++ src/main/java/com/pbc/restcontroller/BlockController.java	(working copy)
@@ -12,7 +12,9 @@
 import static com.pbc.utility.CustomMessageConstants.STR_STATUS_MESSAGE;
 
 import java.io.ByteArrayInputStream;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.stream.Collectors;
 
 import javax.validation.constraints.NotNull;
@@ -53,13 +55,16 @@
 
 	// URL constants
 	private static final String SEND_MESSAGE_URL = "/sendMessage";
-	public static final String BLOCK_STATUS_URL = "/block/messageStatus";
-	public static final String GET_MESSAGE_URL = "/block/getMessage";
-	public static final String ACKNOWLEDGE_DELETE_DATA = "/block/acknowledge/";
-	public static final String GET_FILE = "/block/getFile";
-	public static final String GET_BLOCKS = "/block/getBlocks";
+	private static final String BLOCK_STATUS_URL = "/block/messageStatus";
+	private static final String GET_MESSAGE_URL = "/block/getMessage";
+	private static final String ACKNOWLEDGE_DELETE_DATA = "/block/acknowledge/";
+	private static final String GET_FILE = "/block/getFile";
+	private static final String GET_BLOCKS = "/block/getBlocks";
+	private static final String GET_LOG = "/getLog";
+	private static final String GET_STATISTICS = "/getStatistics";
 
 	private static final Logger logger = Logger.getLogger(BlockController.class);
+	private static final Logger reportLogger = Logger.getLogger("reportsLogger");
 
 	@Autowired
 	private BlockService blockService;
@@ -79,7 +84,8 @@
 			@NotNull @RequestParam("sessionKey") final String sessionKey) {
 		CustomResponse<String> customResponse = null;
 
-		// if (blockService.checkIfExsist(tag, transactionId)) {
+		reportLogger.fatal("Request received for transaction id : " + transactionId);
+
 		final BlockStatus blockStatus = new BlockStatus();
 		blockStatus.setTransactionId(transactionId).setTag(tag).setReceiverAddress(receiver);
 		try {
@@ -96,10 +102,12 @@
 				logger.warn(
 						"CRC sent does not match with calculated crc it's not gonna process it further for combinedKey: "
 								+ tag + transactionId);
+				reportLogger.fatal("CRC is not valid for transaction id : " + transactionId);
 				customResponse = new CustomErrorResponse<>();
 				customResponse.setMessage(MSG_NOT_VALID);
 				return customResponse;
 			}
+			reportLogger.fatal("CRC validated successfully for transaction id : " + transactionId);
 			blockStatus.setStatus(BlockStatusEnum.INPROCESS.name());
 			blockService.taskToNotify(blockStatus, parseableBlockDTO);
 			customResponse = new CustomSuccessResponse<>();
@@ -114,13 +122,6 @@
 			customResponse.setMessage(ERR_IN_CREATE_BLOCK);
 			return customResponse;
 		}
-		// }
-		//
-		// else {
-		// customResponse = new CustomErrorResponse<>();
-		// customResponse.setMessage(CustomMessageConstants.TXN_EXIST_ALREADY);
-		// return customResponse;
-		// }
 	}
 
 	/**
@@ -183,10 +184,13 @@
 		final String combinedKey = acknowledgeRequest.getTag() + acknowledgeRequest.getTransactionId();
 		logger.info("Acknowledge request for data with combined Key: " + combinedKey + " and crc: "
 				+ acknowledgeRequest.getCrc());
+		reportLogger.fatal(
+				"Data successfully received by receiver. Validating acknowledge to delete block from blockchain.");
 		CustomResponse<String> customResponse = null;
 		final BlockStatus blockStatus = blockService.getBlockStatus(acknowledgeRequest.getTag(),
 				acknowledgeRequest.getTransactionId());
 		if (null == blockStatus) {
+			reportLogger.fatal("No block found for transaction id : " + acknowledgeRequest.getTransactionId());
 			logger.warn("Block was not found for given combined key: " + combinedKey);
 			customResponse = new CustomErrorResponse<>();
 			customResponse.setMessage(NO_MESSAGE_FOR_TXNID);
@@ -194,6 +198,8 @@
 		}
 		if (blockStatus.getStatus().equals(BlockStatusEnum.DELETED.name())) {
 			logger.info("As block was already deleted so returning success response.");
+			reportLogger
+					.fatal("Block is already deleted for transaction id : " + acknowledgeRequest.getTransactionId());
 			customResponse = new CustomSuccessResponse<>();
 			customResponse.setMessage(BLOCK_ALREADY_DELETED);
 			return customResponse;
@@ -204,10 +210,12 @@
 			logger.warn(
 					"CRC sent does not match with calculated crc it's not gonna process it further for combined key: "
 							+ combinedKey);
+			reportLogger.fatal("CRC validation failed for transaction id : " + acknowledgeRequest.getTransactionId());
 			customResponse = new CustomErrorResponse<>();
 			customResponse.setMessage(MSG_NOT_VALID);
 			return customResponse;
 		}
+		reportLogger.fatal("CRC validated successfully for transaction id : " + acknowledgeRequest.getTransactionId());
 		logger.info("Block delete acknowledged successfully for combined key: " + combinedKey);
 		logger.info("TransactionId is valid for given transactions with combined key: " + combinedKey);
 		blockService.checkAndNotify(acknowledgeRequest.getCrc(), acknowledgeRequest.getTag(),
@@ -224,22 +232,6 @@
 		return blockService.getDownloadFile(fileId);
 	}
 
-	// @RequestMapping(value = GET_FILE, method = RequestMethod.GET, produces =
-	// MediaType.APPLICATION_OCTET_STREAM_VALUE)
-	// @ResponseBody
-	// public void downloadByServlet(@RequestParam("fileId") final String
-	// fileId, final HttpServletResponse res)
-	// throws IOException {
-	// final File file = blockService.getDownloadFile(fileId).getFile();
-	// final InputStream in = new FileInputStream(file);
-	//
-	// res.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
-	// res.setHeader("Content-Disposition", "attachment; filename=" +
-	// file.getName());
-	// res.setHeader("Content-Length", String.valueOf(file.length()));
-	// FileCopyUtils.copy(in, res.getOutputStream());
-	// }
-
 	@ResponseBody
 	@RequestMapping(value = GET_BLOCKS, method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
 	public Object getBlockForReceiver(@RequestBody @NotNull final ReceiverAddresses receiverAddresses) {
@@ -257,4 +249,22 @@
 		response.setResultSet(blockService.getBlockList(addresses));
 		return response;
 	}
+
+	@ResponseBody
+	@RequestMapping(value = GET_LOG, method = RequestMethod.GET, consumes = MediaType.TEXT_PLAIN_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
+	public Object getLog(@RequestParam("pointerLocation") final String pointerLocation) {
+		return blockService.readLog(Long.parseLong(pointerLocation));
+	}
+
+	@ResponseBody
+	@RequestMapping(value = GET_STATISTICS, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
+	public Object getAllBlockDetail() {
+
+		final Map<String, Object> map = new HashMap<>();
+		map.put("totalBlocks", blockService.totalBlocks());
+		map.put("availableBlocks", blockService.availableBlocks());
+		map.put("orderedBlockSet", blockService.getOrderedSet());
+
+		return map;
+	}
 }
Index: src/main/java/com/pbc/service/BlockService.java
===================================================================
--- src/main/java/com/pbc/service/BlockService.java	(revision 248)
+++ src/main/java/com/pbc/service/BlockService.java	(working copy)
@@ -1,12 +1,18 @@
 package com.pbc.service;
 
+import static com.pbc.utility.ConfigConstants.REPORT_LOG_FILE;
+import static com.pbc.utility.ConfigConstants.REPORT_LOG_FILE_PATH;
+
 import java.io.File;
+import java.io.RandomAccessFile;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.TreeSet;
 import java.util.UUID;
 
 import org.apache.log4j.Logger;
@@ -22,6 +28,7 @@
 import com.pbc.blockchain.BlockResponseDTO;
 import com.pbc.blockchain.ParseableBlockDTO;
 import com.pbc.blockchain.creation.Persistor;
+import com.pbc.blockchain.creation.SingleFileJsonPersistor;
 import com.pbc.exception.BlockProcessingException;
 import com.pbc.exception.DataException;
 import com.pbc.exception.ServiceException;
@@ -39,6 +46,7 @@
 	private static ObjectMapper om = new ObjectMapper();
 	private static String firstBlockHash = null;
 	private static final Logger logger = Logger.getLogger(BlockService.class);
+	private static final Logger reportLogger = Logger.getLogger("reportsLogger");
 
 	@Autowired
 	private BlockStatusDao blockStatusDao;
@@ -80,11 +88,14 @@
 			jsonPersistor.addBlock(block);
 			blockStatusDao.updateStatus(block.getBlockContent().getTag(), block.getBlockContent().getHashTxnId(),
 					BlockStatusEnum.SAVED.name(), block.getBlockContent().getPublicAddressOfReciever());
+			reportLogger.fatal("Block successfully saved into Private BlockChain for transaction id : "
+					+ block.getBlockContent().getHashTxnId());
 		} catch (final DataException | BlockProcessingException de) {
 			blockStatusDao.updateStatus(block.getBlockContent().getTag(), block.getBlockContent().getHashTxnId(),
 					BlockStatusEnum.ERROR_OCCURED.name(), null);
 			logger.error("Error while adding block with combined key: " + block.getBlockContent().getTag()
 					+ block.getBlockContent().getHashTxnId(), de);
+			reportLogger.fatal("Unable to save block for transaction id : " + block.getBlockContent().getHashTxnId());
 			throw new ServiceException(de);
 		} catch (final Exception e) {
 			blockStatusDao.updateStatus(block.getBlockContent().getTag(), block.getBlockContent().getHashTxnId(),
@@ -91,6 +102,7 @@
 					BlockStatusEnum.ERROR_OCCURED.name(), null);
 			logger.error("Error occured while adding block so updating the block status for combined key: "
 					+ block.getBlockContent().getTag() + block.getBlockContent().getHashTxnId(), e);
+			reportLogger.fatal("Unable to save block for transaction id : " + block.getBlockContent().getHashTxnId());
 			throw new ServiceException("Error occured while adding block.", e);
 		}
 	}
@@ -111,10 +123,12 @@
 			jsonPersistor.removeBlockWithHash(tag + transactionId);
 			blockStatusDao.updateStatus(tag, transactionId, BlockStatusEnum.DELETED.name(), null);
 		} catch (final DataException | BlockProcessingException de) {
+			reportLogger.fatal("Unable to delete block for transaction id : " + transactionId);
 			logger.error("Error while removing data from block chain for combined key: " + tag + transactionId, de);
 			throw new ServiceException(de);
 		} catch (final Exception e) {
 			logger.error("Error while removing data from block chain for combined key: " + tag + transactionId, e);
+			reportLogger.fatal("Unable to delete block for transaction id : " + transactionId);
 			throw new ServiceException("Error while removing data from block chain.", e);
 		}
 	}
@@ -496,4 +510,40 @@
 			return false;
 		}
 	}
+
+	public Map<String, String> readLog(final long pointerLocation) {
+		String data = null;
+		try (RandomAccessFile raf = new RandomAccessFile(new File(REPORT_LOG_FILE_PATH + REPORT_LOG_FILE), "rw")) {
+			raf.seek(pointerLocation);
+			final long length = raf.length();
+			final int readDataLength = (int) ((int) length - pointerLocation);
+			final byte[] blockBytes = new byte[readDataLength];
+			raf.read(blockBytes, 0, readDataLength);
+			data = new String(blockBytes, "UTF-8");
+
+			final Map<String, String> mapData = new HashMap<>();
+			mapData.put("currentPointer", String.valueOf(length));
+			mapData.put("logData", data);
+			return mapData;
+		} catch (final Exception e) {
+			logger.error("Problem reading log data ", e);
+			throw new ServiceException(e.getMessage(), e);
+		}
+	}
+
+	public int totalBlocks() {
+		return blockStatusDao.getTotalBlock();
+	}
+
+	public int availableBlocks() {
+		return blockStatusDao.getAvailableBlock();
+	}
+
+	public TreeSet<BlockContent> getOrderedSet() {
+		if (jsonPersistor instanceof SingleFileJsonPersistor<?>) {
+			return ((SingleFileJsonPersistor<Block>) jsonPersistor).getOrderedSet();
+		} else {
+			return null;
+		}
+	}
 }
\ No newline at end of file
Index: src/main/java/com/pbc/utility/ConfigConstants.java
===================================================================
--- src/main/java/com/pbc/utility/ConfigConstants.java	(revision 248)
+++ src/main/java/com/pbc/utility/ConfigConstants.java	(working copy)
@@ -19,6 +19,8 @@
 	public static final List<String> SYNCHRONIZATION_NODES = Arrays
 			.asList(PropertiesReader.getProperty("synchronizationNodes").split(","));
 	public static final String BLOCKCHAIN_CONTROLLER = PropertiesReader.getProperty("blockchain_controller");
+	public static final String REPORT_LOG_FILE_PATH = PropertiesReader.getProperty("reportLogFilePath");
+	public static final String REPORT_LOG_FILE = PropertiesReader.getProperty("reportLogFile");
 
 	private ConfigConstants() {
 		// Preventing from creating object
Index: src/main/resources/config.properties
===================================================================
--- src/main/resources/config.properties	(revision 248)
+++ src/main/resources/config.properties	(working copy)
@@ -10,4 +10,7 @@
 #nodes=127.0.0.1
 #synchronizationNodes=54.149.14.98,34.209.137.243,54.244.152.56
 synchronizationNodes=127.0.0.1
-blockchain_controller=/blockchain_controller.json
\ No newline at end of file
+blockchain_controller=/blockchain_controller.json
+#reportLogFilePath=/home/linchpinub4/Documents/apache-tomcat-8.0.33/logs
+reportLogFilePath=/opt/apache-tomcat-8.5.15/logs
+reportLogFile=/pbc_reports.log
Index: src/main/resources/log4j.properties
===================================================================
--- src/main/resources/log4j.properties	(revision 248)
+++ src/main/resources/log4j.properties	(working copy)
@@ -14,4 +14,14 @@
 log4j.appender.file.MaxFileSize=10MB
 log4j.appender.file.MaxBackupIndex=10
 log4j.appender.file.layout=org.apache.log4j.EnhancedPatternLayout
-log4j.appender.file.layout.ConversionPattern=%d{ISO8601}{IST} %-5p %c{1}:%L - %m%n---------------------------------------%n
\ No newline at end of file
+log4j.appender.file.layout.ConversionPattern=%d{ISO8601}{IST} %-5p %c{1}:%L - %m%n---------------------------------------%n
+
+
+log4j.appender.reportsLog=org.apache.log4j.FileAppender
+log4j.appender.reportsLog.File=${catalina.home}/logs/pbc_reports.log
+log4j.appender.reportsLog.layout=org.apache.log4j.PatternLayout
+log4j.appender.reportsLog.layout.ConversionPattern=>> %m%n %n
+
+
+log4j.category.reportsLogger=FATAL, reportsLog
+log4j.additivity.reportsLogger=false
\ No newline at end of file
Index: src/main/webapp/WEB-INF/lib/tailtag.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: src/main/webapp/WEB-INF/lib/tailtag.jar
===================================================================
--- src/main/webapp/WEB-INF/lib/tailtag.jar	(revision 0)
+++ src/main/webapp/WEB-INF/lib/tailtag.jar	(working copy)

Property changes on: src/main/webapp/WEB-INF/lib/tailtag.jar
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: src/main/webapp/WEB-INF/taglib.tld
===================================================================
--- src/main/webapp/WEB-INF/taglib.tld	(revision 0)
+++ src/main/webapp/WEB-INF/taglib.tld	(working copy)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
+
+<taglib>
+	<tlibversion>1.4</tlibversion>
+	<jspversion>1.1</jspversion>
+	<shortname>Tail taglib</shortname>
+	<uri>http://www.servletsuite.com/servlets/tailtag</uri>
+	<info>Tail taglib</info>
+
+	<tag>
+		<name>tail</name>
+		<tagclass>com.cj.tail.tailTag</tagclass>
+		<teiclass>com.cj.tail.strVariable</teiclass>
+		<bodycontent>JSP</bodycontent>
+		<info>Tail taglib</info>
+
+		<attribute>
+			<name>file</name>
+			<required>true</required>
+			<rtexprvalue>true</rtexprvalue>
+		</attribute>
+
+		<attribute>
+			<name>id</name>
+			<required>false</required>
+			<rtexprvalue>true</rtexprvalue>
+		</attribute>
+
+		<attribute>
+			<name>count</name>
+			<required>false</required>
+			<rtexprvalue>true</rtexprvalue>
+		</attribute>
+	</tag>
+
+
+</taglib> 
Index: src/main/webapp/WEB-INF/web.xml
===================================================================
--- src/main/webapp/WEB-INF/web.xml	(revision 248)
+++ src/main/webapp/WEB-INF/web.xml	(working copy)
@@ -6,9 +6,6 @@
 	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
 	version="2.5">
 
-	<!-- <listener>
-		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
-	</listener> -->
 	<servlet>
 		<servlet-name>pbc</servlet-name>
 		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
@@ -18,8 +15,4 @@
 		<servlet-name>pbc</servlet-name>
 		<url-pattern>/apis/*</url-pattern>
 	</servlet-mapping>
-	<!-- <context-param>
-		<param-name>contextConfigLocation</param-name>
-		<param-value>WEB-INF/pbc-servlet.xml</param-value>
-	</context-param> -->
 </web-app>
\ No newline at end of file
Index: src/main/webapp/blockChain.jsp
===================================================================
--- src/main/webapp/blockChain.jsp	(revision 0)
+++ src/main/webapp/blockChain.jsp	(working copy)
@@ -0,0 +1,14 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8"
+	pageEncoding="ISO-8859-1"%>
+<%@page import="java.io.*"%>
+<%@page import="java.net.URL"%>
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<html>
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
+<meta name="viewport" content="width=device-width, initial-scale=1.0">
+<title></title>
+</head>
+<body>Hello
+</body>
+</html>
\ No newline at end of file
Index: src/main/webapp/logger.jsp
===================================================================
--- src/main/webapp/logger.jsp	(revision 0)
+++ src/main/webapp/logger.jsp	(working copy)
@@ -0,0 +1,35 @@
+<%@ page language="java" contentType="text/html; charset=UTF-8"
+	pageEncoding="UTF-8"%>
+<%@ taglib uri="/WEB-INF/taglib.tld" prefix="t"%>
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<html>
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
+<!-- <meta http-equiv="refresh" content="1"> -->
+<title>PBC Logger</title>
+</head>
+
+<script>
+	function autoScrolling() {
+		window.scrollTo(0, document.body.scrollHeight);
+	}
+
+	setInterval(autoScrolling, 1000);
+</script>
+
+<body>
+
+	<t:tail
+		file="/home/linchpinub4/Documents/apache-tomcat-8.0.33/logs/pbc_reports.log"
+		count="50" id="S">
+		<br><%=S%>
+	</t:tail>
+
+	<!--Script for Scroll to bottom -->
+	<script type="text/javascript">
+		setInterval(function() {
+		}, 1000);
+	</script>
+
+</body>
+</html>
\ No newline at end of file
